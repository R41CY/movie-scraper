name: Daily IMDb Scraper

on:
  schedule:
    # Run daily at 6:00 AM UTC (adjust timezone as needed)
    - cron: '0 6 * * *'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      details_limit:
        description: 'Number of movies to fetch detailed info for'
        required: false
        default: '100'
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  scrape-imdb:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run optimized scraper
      id: scraper
      run: |
        echo "Starting scraper at $(date)"
        python imdb_scraper_optimized.py
        echo "Scraper completed at $(date)"
        
        # Check if Excel file was created
        if [ -f "imdb_movies_optimized.xlsx" ]; then
          echo "excel_created=true" >> $GITHUB_OUTPUT
          echo "Excel file created successfully"
        else
          echo "excel_created=false" >> $GITHUB_OUTPUT
          echo "Excel file not found"
        fi
        
        # Check if log file exists
        if [ -f "imdb_scraper.log" ]; then
          echo "log_created=true" >> $GITHUB_OUTPUT
          cp imdb_scraper.log logs/scraper-$(date +%Y%m%d-%H%M%S).log
        else
          echo "log_created=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate summary report
      if: always()
      run: |
        cat > summary.md << EOF
        # IMDb Scraper Daily Run Summary
        
        **Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
        **Status:** ${{ job.status }}
        **Excel File Created:** ${{ steps.scraper.outputs.excel_created }}
        **Log File Created:** ${{ steps.scraper.outputs.log_created }}
        
        ## Files Generated
        EOF
        
        if [ -f "imdb_movies_optimized.xlsx" ]; then
          file_size=$(du -h "imdb_movies_optimized.xlsx" | cut -f1)
          echo "- ✅ imdb_movies_optimized.xlsx (${file_size})" >> summary.md
        else
          echo "- ❌ imdb_movies_optimized.xlsx (not created)" >> summary.md
        fi
        
        if [ -f "imdb_scraper.log" ]; then
          log_lines=$(wc -l < "imdb_scraper.log")
          echo "- ✅ imdb_scraper.log (${log_lines} lines)" >> summary.md
        else
          echo "- ❌ imdb_scraper.log (not created)" >> summary.md
        fi
        
        echo "" >> summary.md
        echo "## Performance Metrics" >> summary.md
        
        # Extract performance info from log if available
        if [ -f "imdb_scraper.log" ]; then
          echo "```" >> summary.md
          grep -E "(Performance Metrics|Total Duration|Requests Made|Cache Hits|Errors)" imdb_scraper.log | tail -10 >> summary.md
          echo "```" >> summary.md
        fi
    
    - name: Upload Excel results
      if: steps.scraper.outputs.excel_created == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: imdb-movies-${{ github.run_number }}
        path: imdb_movies_optimized.xlsx
        retention-days: 30
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scraper-logs-${{ github.run_number }}
        path: |
          logs/
          imdb_scraper.log
          summary.md
        retention-days: 7
    
    - name: Create release on success
      if: steps.scraper.outputs.excel_created == 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Create a release with the data file
        release_name="imdb-data-$(date +%Y%m%d)"
        release_tag="data-$(date +%Y%m%d-%H%M)"
        
        # Create release
        gh release create "$release_tag" \
          --title "$release_name" \
          --notes-file summary.md \
          --latest \
          "imdb_movies_optimized.xlsx#IMDb Movies Data"
    
    - name: Cleanup old releases
      if: always()
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Keep only the last 7 releases to manage storage
        gh release list --limit 100 --json tagName,createdAt | \
        jq -r 'sort_by(.createdAt) | reverse | .[7:] | .[].tagName' | \
        head -10 | \
        while read tag; do
          echo "Deleting old release: $tag"
          gh release delete "$tag" --yes || true
        done

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: scrape-imdb
    if: failure()
    
    steps:
    - name: Create failure issue
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Create an issue if the scraper fails
        issue_title="Daily Scraper Failed - $(date +%Y-%m-%d)"
        issue_body="The daily IMDb scraper failed on $(date '+%Y-%m-%d %H:%M:%S UTC').
        
        **Run ID:** ${{ github.run_id }}
        **Workflow:** ${{ github.workflow }}
        **Repository:** ${{ github.repository }}
        
        Please check the workflow logs for details:
        https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        This issue was automatically created by the failed workflow."
        
        gh issue create \
          --title "$issue_title" \
          --body "$issue_body" \
          --label "bug,automation" || true